"""
Classifies: CHEBI:25029 leukotriene
"""
"""
Classifies: leukotriene
"""
from rdkit import Chem
from rdkit.Chem import rdMolDescriptors

def is_leukotriene(smiles: str):
    """
    Determines if a molecule is a leukotriene based on its SMILES string.
    A leukotriene is an icosanoid derived from C20 polyunsaturated fatty acids,
    with at least four double bonds (three of which are conjugated), generated by leukocytes from arachidonic acid.
    
    Args:
        smiles (str): SMILES string of the molecule
    
    Returns:
        bool: True if molecule is a leukotriene, False otherwise
        str: Reason for classification
    """
    # Parse SMILES
    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        return False, "Invalid SMILES string"

    # Remove stereochemistry to ignore cis/trans configurations in double bonds
    mol2 = Chem.Mol(mol)
    Chem.RemoveStereochemistry(mol2)

    # Count the number of carbon atoms
    c_count = sum(1 for atom in mol2.GetAtoms() if atom.GetAtomicNum() == 6)
    if c_count < 20:
        return False, f"Molecule has {c_count} carbon atoms, expected at least 20 for leukotriene"

    # Identify double bonds
    double_bonds = [bond for bond in mol2.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.DOUBLE]
    if len(double_bonds) < 4:
        return False, f"Molecule has {len(double_bonds)} double bonds, expected at least 4 for leukotriene"

    # Check for three conjugated double bonds (conjugated triene)
    # Use a SMARTS pattern that matches conjugated trienes regardless of stereochemistry
    conjugated_triene_pattern = Chem.MolFromSmarts("[#6]=[#6]-[#6]=[#6]-[#6]=[#6]")
    conjugated_matches = mol2.GetSubstructMatches(conjugated_triene_pattern)
    if len(conjugated_matches) == 0:
        return False, "No conjugated triene (three conjugated double bonds) found"

    # Ensure the molecule is linear (no rings)
    if mol2.GetRingInfo().NumRings() > 0:
        return False, "Molecule contains rings, expected linear chain for leukotriene"

    # Look for common functional groups in leukotrienes
    # Check for carboxylic acid group (-COOH)
    carboxylic_acid = Chem.MolFromSmarts("C(=O)[O;H1]")
    if not mol2.HasSubstructMatch(carboxylic_acid):
        return False, "No carboxylic acid group found"

    # Check for hydroxyl groups (-OH)
    hydroxyl_group = Chem.MolFromSmarts("[OX2H]")
    if not mol2.HasSubstructMatch(hydroxyl_group):
        return False, "No hydroxyl group found"

    return True, "Molecule matches criteria for a leukotriene"

__metadata__ = {   'chemical_class': {   'id': 'LEUKOTRIENE',
                              'name': 'leukotriene',
                              'definition': 'Any icosanoid from that family of C20 polyunsaturated fatty acids and their derivatives generated by leukocytes from arachidonic acid, each member having four double bonds of which three are conjugated.',
                              'parents': ['ICOSANOID', 'FATTY_ACID_DERIVATIVE']},
        'config': {   'llm_model_name': 'lbl/claude-sonnet',
                      'f1_threshold': 0.8,
                      'max_attempts': 5,
                      'max_positive_instances': None,
                      'max_positive_to_test': None,
                      'max_negative_to_test': None,
                      'max_positive_in_prompt': 50,
                      'max_negative_in_prompt': 20,
                      'max_instances_in_prompt': 100,
                      'test_proportion': 0.1},
        'message': None,
        'attempt': 1,
        'success': True,
        'best': True,
        'error': '',
        'stdout': None,
        'num_true_positives': None,
        'num_false_positives': None,
        'num_true_negatives': None,
        'num_false_negatives': None,
        'num_negatives': None,
        'precision': None,
        'recall': None,
        'f1': None,
        'accuracy': None}