"""
Classifies: CHEBI:25029 leukotriene
"""
"""
Classifies: leukotriene
"""
from rdkit import Chem
from rdkit.Chem import AllChem

def is_leukotriene(smiles: str):
    """
    Determines if a molecule is a leukotriene based on its SMILES string.
    A leukotriene is an icosanoid derived from C20 polyunsaturated fatty acids,
    with at least four double bonds (three of which are conjugated),
    possibly containing an epoxide ring, generated by leukocytes from arachidonic acid.
    
    Args:
        smiles (str): SMILES string of the molecule
    
    Returns:
        bool: True if molecule is a leukotriene, False otherwise
        str: Reason for classification
    """
    # Parse SMILES
    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        return False, "Invalid SMILES string"

    # Remove stereochemistry to simplify matching
    mol2 = Chem.Mol(mol)
    Chem.RemoveStereochemistry(mol2)

    # Count the number of carbon atoms
    c_count = sum(1 for atom in mol2.GetAtoms() if atom.GetAtomicNum() == 6)
    if c_count < 20:
        return False, f"Molecule has {c_count} carbon atoms, expected at least 20 for leukotriene"

    # Identify conjugated triene system in a linear chain (exclude rings)
    conjugated_triene = Chem.MolFromSmarts("[#6]-[CH]=[CH]-[CH]=[CH]-[CH]=[CH]-[#6]")
    matches_triene = mol2.HasSubstructMatch(conjugated_triene)
    if not matches_triene:
        return False, "No conjugated triene system found"

    # Check for at least four double bonds (total)
    double_bonds = [bond for bond in mol2.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.DOUBLE]
    if len(double_bonds) < 4:
        return False, f"Molecule has {len(double_bonds)} double bonds, expected at least 4 for leukotriene"

    # Check for terminal carboxylic acid group (-COOH)
    carboxylic_acid = Chem.MolFromSmarts("C(=O)[O;H1]")
    if not mol2.HasSubstructMatch(carboxylic_acid):
        return False, "No terminal carboxylic acid group found"

    # Check for linear long chain fatty acid (exclude rings except epoxides)
    ring_info = mol2.GetRingInfo()
    non_epoxide_rings = 0
    for ring in ring_info.AtomRings():
        ring_atoms = [mol2.GetAtomWithIdx(idx) for idx in ring]
        # Check if ring is epoxide (3-membered ring with one oxygen)
        if len(ring) == 3:
            o_count = sum(1 for atom in ring_atoms if atom.GetAtomicNum() == 8)
            if o_count == 1:
                continue  # Epoxide ring is acceptable
        non_epoxide_rings += 1
    if non_epoxide_rings > 0:
        return False, "Molecule contains ring structures other than epoxides"

    # Check for leukotriene-specific functional groups
    # Optional hydroxyl groups (-OH) at C5, C12 positions
    hydroxyl_groups = Chem.MolFromSmarts("[#6][CH](O)[#6]")
    hydroxyl_matches = mol2.GetSubstructMatches(hydroxyl_groups)
    if len(hydroxyl_matches) == 0:
        return False, "No hydroxyl groups found, expected at least one"

    # Exclude molecules known to be other eicosanoids (e.g., resolvins, lipoxins)
    # For simplicity, exclude if molecule has more than one hydroxyl group beyond C5 and C12
    if len(hydroxyl_matches) > 2:
        return False, "Molecule has multiple hydroxyl groups, may not be a leukotriene"

    # If molecule meets all criteria, classify as leukotriene
    return True, "Molecule matches criteria for a leukotriene"

__metadata__ = {   'chemical_class': {   'id': 'LEUKOTRIENE',
                              'name': 'leukotriene',
                              'definition': 'Any icosanoid from that family of C20 polyunsaturated fatty acids and their derivatives generated by leukocytes from arachidonic acid, each member having four double bonds of which three are conjugated.',
                              'parents': ['ICOSANOID', 'FATTY_ACID_DERIVATIVE']},
        'config': {   'llm_model_name': 'lbl/claude-sonnet',
                      'f1_threshold': 0.8,
                      'max_attempts': 5,
                      'max_positive_instances': None,
                      'max_positive_to_test': None,
                      'max_negative_to_test': None,
                      'max_positive_in_prompt': 50,
                      'max_negative_in_prompt': 20,
                      'max_instances_in_prompt': 100,
                      'test_proportion': 0.1},
        'message': None,
        'attempt': 3,
        'success': True,
        'best': True,
        'error': '',
        'stdout': None,
        'num_true_positives': None,
        'num_false_positives': None,
        'num_true_negatives': None,
        'num_false_negatives': None,
        'num_negatives': None,
        'precision': None,
        'recall': None,
        'f1': None,
        'accuracy': None}