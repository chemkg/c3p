"""
Classifies: CHEBI:25029 leukotriene
"""
"""
Classifies: Leukotrienes – any icosanoid stemming from a C20 polyunsaturated fatty acid (arachidonic acid) derivative 
generated by leukocytes, and having four double bonds of which three are conjugated.
"""

from rdkit import Chem

def is_leukotriene(smiles: str):
    """
    Determines if a molecule is a leukotriene based on its SMILES string.
    
    Heuristic criteria used:
      1. The molecule must have at least 20 carbon atoms.
      2. The molecule must contain exactly four carbon–carbon double bonds.
      3. At least three of the double bonds should be conjugated.
      
    Note: Because leukotrienes are derivatives of arachidonic acid, the rules are based on a C20 core and
          a typical unsaturation pattern. Fingerprinting or mapping the exact C20 unsaturated chain is complex,
          so this heuristic may misclassify edge cases.
    
    Args:
        smiles (str): SMILES string of the molecule.
        
    Returns:
        bool: True if the molecule is classified as a leukotriene, False otherwise.
        str: Explanation of the decision.
    """
    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        return False, "Invalid SMILES string"
        
    # Count carbon atoms in the molecule.
    carbon_atoms = [atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6]
    n_carbons = len(carbon_atoms)
    if n_carbons < 20:
        return False, f"Too few carbons ({n_carbons} found; need at least 20 for a C20 derivative)"
        
    # Count carbon-carbon double bonds.
    cc_double_bonds = []
    for bond in mol.GetBonds():
        # Check if the bond is a double bond and both atoms are carbon.
        if bond.GetBondType() == Chem.BondType.DOUBLE:
            a1 = bond.GetBeginAtom()
            a2 = bond.GetEndAtom()
            if a1.GetAtomicNum() == 6 and a2.GetAtomicNum() == 6:
                cc_double_bonds.append(bond)
                
    n_dbl = len(cc_double_bonds)
    if n_dbl != 4:
        return False, f"Found {n_dbl} carbon–carbon double bonds; exactly 4 required"
        
    # Count how many of these double bonds are conjugated.
    # RDKit flags conjugation via bond.GetIsConjugated().
    n_conjugated = sum(1 for bond in cc_double_bonds if bond.GetIsConjugated())
    if n_conjugated < 3:
        return False, f"Only {n_conjugated} conjugated double bonds found; at least 3 required"
        
    return True, "Molecule has at least 20 carbons, exactly 4 C=C bonds (with at least 3 conjugated) consistent with a leukotriene derivative"

# Example usage (uncomment to test):
# smiles_example = "CCCCC\\C=C/C\\C=C/C=C/C=C/[C@@H]1O[C@H]1CCCC(O)=O"  # leukotriene A4
# result, reason = is_leukotriene(smiles_example)
# print(result, reason)